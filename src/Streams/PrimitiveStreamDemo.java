package Streams;

import java.util.stream.IntStream;
import java.util.stream.Stream;

public class PrimitiveStreamDemo {
    public static void main(String[] args) {
        // range
        IntStream.range(1, 5).forEach(System.out::println); // 1 to 4

        // rangeClosed
        IntStream.rangeClosed(1, 5).forEach(System.out::println); // 1 to 5

        // sum
        System.out.println("Sum: " + IntStream.of(1, 2, 3, 4, 5).sum());

        // average
        System.out.println("Average: " + IntStream.of(10, 20, 30).average().getAsDouble());

        // min
        IntStream.of(3, 1, 7).min().ifPresent(System.out::println);

        // max
        IntStream.of(3, 1, 7).max().ifPresent(System.out::println);

        // summaryStatistics
        System.out.println(IntStream.of(2, 4, 6, 8).summaryStatistics());

        // boxed
        Stream<Integer> boxed = IntStream.rangeClosed(1, 3).boxed();
        boxed.forEach(System.out::println);

        // mapToObj
        IntStream.of(1, 2, 3).mapToObj(n -> "Num:" + n).forEach(System.out::println);
    }
}
/*
*1. Stream<T> (Reference Stream) Built-in Methods
ðŸ‘‰ Creation methods

stream() â†’ From a collection (e.g., list.stream()).

parallelStream() â†’ Parallel processing from collection.

Stream.of(Tâ€¦ values) â†’ From values.

Stream.empty() â†’ Empty stream.

Stream.generate(Supplier<T>) â†’ Infinite stream, must use .limit().

Stream.iterate(seed, UnaryOperator<T>) â†’ Infinite stream with iteration logic.

Stream.concat(stream1, stream2) â†’ Combines two streams.

Stream.builder() â†’ Manually build a stream.

Stream.ofNullable(T value) â†’ Returns empty if null. (Java 9+).

ðŸ‘‰ Intermediate Operations (Lazy; return Stream)

filter(Predicate<T>) â†’ Keeps only elements matching condition.

map(Function<T,R>) â†’ Transforms each element into another.

mapToInt(ToIntFunction<T>) / mapToLong / mapToDouble â†’ Converts object stream to primitive stream.

flatMap(Function<T,Stream<R>>) â†’ Flattens nested streams.

flatMapToInt / flatMapToLong / flatMapToDouble â†’ Flattening into primitive streams.

distinct() â†’ Removes duplicates (uses equals()).

sorted() â†’ Natural sorting.

sorted(Comparator<T>) â†’ Custom sorting.

peek(Consumer<T>) â†’ Debugging; lets you see elements during pipeline.

limit(long n) â†’ Truncate stream to first n elements.

skip(long n) â†’ Skip first n elements.

unordered() â†’ Removes encounter-order guarantee (helps performance in parallel).

ðŸ‘‰ Terminal Operations (Consumes stream, produces result)

forEach(Consumer<T>) â†’ Performs action on each element (order not guaranteed in parallel).

forEachOrdered(Consumer<T>) â†’ Ordered version of forEach.

toArray() â†’ Collects elements into array.

toArray(IntFunction<A[]>) â†’ Collects into custom array type.

reduce(BinaryOperator<T>) â†’ Reduces elements (returns Optional<T>).

reduce(T identity, BinaryOperator<T>) â†’ Reduces with identity value.

reduce(U identity, BiFunction<U,? super T,U>, BinaryOperator<U>) â†’ More complex reduce with different types.

collect(Collector<T,A,R>) â†’ Most powerful operation â†’ collects into List, Set, Map, joining, etc.

min(Comparator<T>) â†’ Minimum element wrapped in Optional.

max(Comparator<T>) â†’ Maximum element wrapped in Optional.

count() â†’ Number of elements.

anyMatch(Predicate<T>) â†’ Returns true if any element matches.

allMatch(Predicate<T>) â†’ Returns true if all match.

noneMatch(Predicate<T>) â†’ Returns true if no element matches.

findFirst() â†’ Returns first element as Optional<T>.

findAny() â†’ Returns any element (useful in parallel).

iterator() â†’ Get an Iterator<T>.

spliterator() â†’ Get a Spliterator<T> (used in parallel splitting).

ðŸ‘‰ Stream State / Utility Methods

isParallel() â†’ Checks if stream is parallel.

sequential() â†’ Returns sequential stream.

parallel() â†’ Returns parallel stream.

onClose(Runnable) â†’ Add callback when stream closes.

close() â†’ Closes stream (useful with I/O streams).

ðŸ”¹ 2. Primitive Streams (IntStream, LongStream, DoubleStream)

They have everything from Stream<T> + numeric-specific methods.

ðŸ‘‰ Creation

IntStream.range(start, end) â†’ [start, end).

IntStream.rangeClosed(start, end) â†’ [start, end].

IntStream.of(1,2,3,4) â†’ Directly create.

IntStream.generate(IntSupplier) â†’ Infinite stream.

IntStream.iterate(seed, f) â†’ Iterating stream.

IntStream.empty().

ðŸ‘‰ Extra Terminal Ops

sum() â†’ Sum of all elements.

average() â†’ Average (returns OptionalDouble).

min() â†’ Minimum (OptionalInt/OptionalLong/OptionalDouble).

max() â†’ Maximum.

summaryStatistics() â†’ Returns stats object (IntSummaryStatistics, DoubleSummaryStatistics).

ðŸ‘‰ Extra Conversions

boxed() â†’ Convert IntStream â†’ Stream<Integer>.

mapToObj(IntFunction<R>) â†’ Convert numbers into objects.

ðŸ”¹ 3. Collectors (via Collectors class)

Common built-in collectors (used with .collect()):

Collectors.toList() â†’ Collect to List.

Collectors.toSet() â†’ Collect to Set.

Collectors.toMap(keyMapper, valueMapper) â†’ Map.

Collectors.joining(", ") â†’ Concatenate strings.

Collectors.groupingBy(Function) â†’ Grouping into Map.

Collectors.partitioningBy(Predicate) â†’ Partition into two groups.

Collectors.counting() â†’ Count elements.

Collectors.summarizingInt(...), summarizingDouble(...), summarizingLong(...).

Collectors.averagingInt(...), etc.

Collectors.collectingAndThen(downstream, finisher) â†’ Post-process.

ðŸ”¹ 4. BaseStream Methods (Common to All)

iterator() â†’ Returns Iterator.

spliterator() â†’ Returns Spliterator.

isParallel().

sequential().

parallel().

unordered().

onClose(Runnable).

close().*/
